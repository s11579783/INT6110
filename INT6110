<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>智慧農業雲平臺系統</title>
    <link rel="icon" href="data:,"> <!-- 禁用favicon请求 -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Microsoft YaHei', sans-serif;
        }
        
        body {
            background-color: #f0f7e9;
            padding: 20px;
            max-width: 100%;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #2c7d31;
            text-align: center;
            margin-bottom: 20px;
            font-size: 28px;
        }
        
        .dashboard {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
            justify-content: space-between;
        }
        
        .control-panel {
            flex: 1;
            min-width: 300px;
            background-color: #effbea;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .visual-panel {
            flex: 1;
            min-width: 300px;
            background-color: #f8f8f8;
            padding: 20px;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .control-group {
            margin-bottom: 15px;
        }
        
        .control-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        
        .control-group .slider-container {
            display: flex;
            align-items: center;
        }
        
        .control-group input[type="range"] {
            flex: 1;
            height: 10px;
            background: #ddd;
            outline: none;
            border-radius: 5px;
        }
        
        .control-group .value {
            min-width: 50px;
            text-align: right;
            font-weight: bold;
            margin-left: 10px;
            color: #2c7d31;
        }
        
        .plant-container {
            width: 100%;
            height: 250px;
            position: relative;
            background-color: #e5e5e5;
            border-radius: 5px;
            overflow: hidden;
            margin-bottom: 20px;
        }
        
        .soil {
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 80px;
            background-color: #8B4513;
            z-index: 1;
            transition: all 0.5s;
        }
        
        .plant {
            position: absolute;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 2;
            transition: all 1s;
        }
        
        .stem {
            width: 8px;
            background-color: #4b7e37;
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            transition: all 1s;
        }
        
        .leaf {
            width: 20px;
            height: 10px;
            background-color: #72b354;
            border-radius: 50%;
            position: absolute;
            transition: all 1s;
        }
        
        .fruit {
            width: 15px;
            height: 15px;
            background-color: #ff6347;
            border-radius: 50%;
            position: absolute;
            transition: all 1s;
            opacity: 0;
        }
        
        .sun {
            position: absolute;
            top: 20px;
            right: 30px;
            width: 40px;
            height: 40px;
            background-color: #ffd700;
            border-radius: 50%;
            box-shadow: 0 0 20px #ffd700;
            z-index: 1;
            transition: all 0.5s;
        }
        
        .rain {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 3;
            opacity: 0;
            transition: all 0.5s;
        }
        
        .raindrop {
            position: absolute;
            width: 2px;
            height: 10px;
            background-color: #add8e6;
            border-radius: 5px;
        }
        
        .status-panel {
            width: 100%;
            padding: 15px;
            background-color: #f8f8f8;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .status {
            margin-bottom: 5px;
            font-size: 14px;
        }
        
        .status-good {
            color: #2c7d31;
        }
        
        .status-warning {
            color: #e67e22;
        }
        
        .status-bad {
            color: #e74c3c;
        }
        
        .info-panel {
            margin-top: 30px;
            background-color: #f8f8f8;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .info-panel h2 {
            color: #2c7d31;
            margin-bottom: 15px;
            font-size: 22px;
        }
        
        .info-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }
        
        .info-table th, .info-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .info-table th {
            background-color: #effbea;
            color: #2c7d31;
        }
        
        .reset-btn {
            display: block;
            margin: 20px auto;
            padding: 10px 20px;
            background-color: #2c7d31;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        .reset-btn:hover {
            background-color: #1e5621;
        }
        
        /* 新增音乐控制按钮样式 */
        .music-control {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #2c7d31;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            z-index: 100;
        }
        
        .music-control i {
            font-size: 20px;
        }
        
        @media (max-width: 768px) {
            .dashboard {
                flex-direction: column;
            }
            
            .control-panel, .visual-panel {
                min-width: 100%;
            }
            
            h1 {
                font-size: 24px;
            }
            
            .plant-container {
                height: 200px;
            }
        }
    </style>
    <!-- 引入Font Awesome图标库 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="container">
        <h1>智慧農業雲平臺系統</h1>
        
        <div class="dashboard">
            <div class="control-panel">
                <h2 style="margin-bottom: 20px; color: #2c7d31; font-size: 20px;">控制面板</h2>
                
                <div class="control-group">
                    <label for="ph-slider">土壤PH值 (酸鹼度)</label>
                    <div class="slider-container">
                        <input type="range" id="ph-slider" min="4.0" max="9.0" step="0.1" value="6.5">
                        <span class="value" id="ph-value">6.5</span>
                    </div>
                </div>
                
                <div class="control-group">
                    <label for="temp-slider">溫度 (°C)</label>
                    <div class="slider-container">
                        <input type="range" id="temp-slider" min="5" max="40" step="1" value="25">
                        <span class="value" id="temp-value">25°C</span>
                    </div>
                </div>
                
                <div class="control-group">
                    <label for="humidity-slider">濕度 (%)</label>
                    <div class="slider-container">
                        <input type="range" id="humidity-slider" min="20" max="90" step="1" value="60">
                        <span class="value" id="humidity-value">60%</span>
                    </div>
                </div>
                
                <div class="control-group">
                    <label for="light-slider">光照強度 (lux)</label>
                    <div class="slider-container">
                        <input type="range" id="light-slider" min="1000" max="100000" step="1000" value="30000">
                        <span class="value" id="light-value">30000 lux</span>
                    </div>
                </div>
                
                <div class="status-panel">
                    <h3 style="margin-bottom: 10px; color: #2c7d31; font-size: 16px;">生長狀態</h3>
                    <div class="status" id="ph-status">PH值: <span class="status-good">正常</span></div>
                    <div class="status" id="temp-status">溫度: <span class="status-good">正常</span></div>
                    <div class="status" id="humidity-status">濕度: <span class="status-good">正常</span></div>
                    <div class="status" id="light-status">光照: <span class="status-good">正常</span></div>
                    <div class="status" id="overall-status">總體狀態: <span class="status-good">健康生長</span></div>
                </div>
            </div>
            
            <div class="visual-panel">
                <h2 style="margin-bottom: 20px; color: #2c7d31; font-size: 20px;">可視化面板</h2>
                
                <div class="plant-container">
                    <div class="soil" id="soil"></div>
                    <div class="sun" id="sun"></div>
                    <div class="rain" id="rain"></div>
                    <div class="plant" id="plant">
                        <div class="stem" id="stem"></div>
                    </div>
                </div>
                
                <div style="width: 100%;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                        <div>生長高度: <span id="height-value">0</span> cm</div>
                        <div>生長天數: <span id="days-value">0</span> 天</div>
                    </div>
                    <div style="width: 100%; height: 20px; background-color: #e5e5e5; border-radius: 10px; overflow: hidden;">
                        <div id="growth-bar" style="height: 100%; width: 0%; background-color: #2c7d31; transition: width 1s;"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <button class="reset-btn" id="reset-btn">重置模擬</button>
        
        <div class="info-panel">
            <h2>參數影響說明</h2>
            <p>以下是各個參數對農作物生長的影響說明：</p>
            
            <table class="info-table">
                <thead>
                    <tr>
                        <th>參數</th>
                        <th>最佳範圍</th>
                        <th>影響</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>土壤PH值</td>
                        <td>6.0 - 7.0</td>
                        <td>影響植物對養分的吸收能力。過酸或過鹼都會阻礙根系吸收特定營養元素。</td>
                    </tr>
                    <tr>
                        <td>溫度</td>
                        <td>20°C - 30°C</td>
                        <td>影響植物的光合作用和呼吸作用。溫度過高會加速蒸騰，過低則影響酶的活性。</td>
                    </tr>
                    <tr>
                        <td>濕度</td>
                        <td>50% - 70%</td>
                        <td>影響植物的蒸騰作用和水分吸收。濕度過低會導致失水過多，過高則易滋生病害。</td>
                    </tr>
                    <tr>
                        <td>光照強度</td>
                        <td>30000 - 50000 lux</td>
                        <td>直接影響光合作用效率。光照不足會導致植物徒長，過強則會抑制生長並可能造成灼傷。</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- 新增音乐控制按钮 -->
    <div class="music-control" id="musicControl">
        <i class="fas fa-music"></i>
    </div>

    <!-- 新增音频元素 -->
    <audio id="bgMusic" loop>
        <source src="https://s11579783.github.io/music/background-music.mp3" type="audio/mpeg">
        您的浏览器不支持音频元素
    </audio>

    <script>
        // 獲取DOM元素
        const phSlider = document.getElementById('ph-slider');
        const phValue = document.getElementById('ph-value');
        const tempSlider = document.getElementById('temp-slider');
        const tempValue = document.getElementById('temp-value');
        const humiditySlider = document.getElementById('humidity-slider');
        const humidityValue = document.getElementById('humidity-value');
        const lightSlider = document.getElementById('light-slider');
        const lightValue = document.getElementById('light-value');
        
        const phStatus = document.getElementById('ph-status');
        const tempStatus = document.getElementById('temp-status');
        const humidityStatus = document.getElementById('humidity-status');
        const lightStatus = document.getElementById('light-status');
        const overallStatus = document.getElementById('overall-status');
        
        const soil = document.getElementById('soil');
        const sun = document.getElementById('sun');
        const rain = document.getElementById('rain');
        const plant = document.getElementById('plant');
        const stem = document.getElementById('stem');
        
        const heightValue = document.getElementById('height-value');
        const daysValue = document.getElementById('days-value');
        const growthBar = document.getElementById('growth-bar');
        
        const resetBtn = document.getElementById('reset-btn');
        
        // 植物生長狀態
        let plantHeight = 0;
        let days = 0;
        let growthRate = 1;
        let leaves = [];
        let fruits = [];
        let raindrops = [];
        let growthTimer;
        let isHealthy = true;
        
        // 初始化雨滴
        function initRaindrops() {
            const rain = document.getElementById('rain');
            rain.innerHTML = '';
            
            for (let i = 0; i < 50; i++) {
                const raindrop = document.createElement('div');
                raindrop.className = 'raindrop';
                raindrop.style.left = `${Math.random() * 100}%`;
                raindrop.style.top = `${Math.random() * 100}%`;
                raindrop.style.animationDelay = `${Math.random() * 2}s`;
                rain.appendChild(raindrop);
                raindrops.push(raindrop);
            }
        }
        
        // 更新植物外觀
        function updatePlantAppearance() {
            // 更新莖高度
            stem.style.height = `${plantHeight}px`;
            
            // 更新葉子位置
            const leafCount = Math.floor(plantHeight / 20);
            
            // 移除舊葉子
            leaves.forEach(leaf => {
                if (leaf.parentNode) {
                    leaf.parentNode.removeChild(leaf);
                }
            });
            leaves = [];
            
            // 添加新葉子
            for (let i = 0; i < leafCount; i++) {
                const leaf1 = document.createElement('div');
                leaf1.className = 'leaf';
                leaf1.style.bottom = `${i * 20 + 5}px`;
                leaf1.style.left = `-15px`;
                stem.appendChild(leaf1);
                leaves.push(leaf1);
                
                const leaf2 = document.createElement('div');
                leaf2.className = 'leaf';
                leaf2.style.bottom = `${i * 20 + 5}px`;
                leaf2.style.right = `-15px`;
                stem.appendChild(leaf2);
                leaves.push(leaf2);
            }
            
            // 當植物高度超過100時添加果實
            if (plantHeight > 100 && isHealthy) {
                // 移除舊果實
                fruits.forEach(fruit => {
                    if (fruit.parentNode) {
                        fruit.parentNode.removeChild(fruit);
                    }
                });
                fruits = [];
                
                const fruitCount = Math.floor((plantHeight - 100) / 30);
                
                for (let i = 0; i < fruitCount; i++) {
                    const fruit = document.createElement('div');
                    fruit.className = 'fruit';
                    fruit.style.bottom = `${100 + i * 30}px`;
                    fruit.style.left = `${i % 2 === 0 ? '-20px' : '20px'}`;
                    fruit.style.opacity = '1';
                    stem.appendChild(fruit);
                    fruits.push(fruit);
                }
            }
        }
        
        // 更新土壤顏色
        function updateSoilColor() {
            const ph = parseFloat(phSlider.value);
            let soilColor;
            
            if (ph < 5.5) {
                // 酸性土壤偏紅褐色
                soilColor = '#8B4513';
            } else if (ph > 7.5) {
                // 鹼性土壤偏灰白色
                soilColor = '#A89078';
            } else {
                // 中性土壤為健康棕色
                soilColor = '#8B5A2B';
            }
            
            soil.style.backgroundColor = soilColor;
        }
        
        // 更新陽光強度
        function updateSunlight() {
            const light = parseInt(lightSlider.value);
            const maxLight = 100000;
            const brightness = (light / maxLight) * 0.8 + 0.2; // 0.2-1.0範圍
            
            sun.style.opacity = brightness;
            sun.style.boxShadow = `0 0 ${20 * brightness}px #ffd700`;
        }
        
        // 更新雨水/濕度視覺效果
        function updateHumidity() {
            const humidity = parseInt(humiditySlider.value);
            
            if (humidity > 70) {
                rain.style.opacity = (humidity - 70) / 20;
            } else {
                rain.style.opacity = '0';
            }
        }
        
        // 檢查參數狀態
        function checkStatus() {
            const ph = parseFloat(phSlider.value);
            const temp = parseInt(tempSlider.value);
            const humidity = parseInt(humiditySlider.value);
            const light = parseInt(lightSlider.value);
            
            // PH值狀態
            let phStatusText, phClass;
            if (ph >= 6.0 && ph <= 7.0) {
                phStatusText = "正常";
                phClass = "status-good";
            } else if ((ph >= 5.5 && ph < 6.0) || (ph > 7.0 && ph <= 7.5)) {
                phStatusText = "輕微偏離";
                phClass = "status-warning";
            } else {
                phStatusText = "嚴重偏離";
                phClass = "status-bad";
            }
            phStatus.innerHTML = `PH值: <span class="${phClass}">${phStatusText}</span>`;
            
            // 溫度狀態
            let tempStatusText, tempClass;
            if (temp >= 20 && temp <= 30) {
                tempStatusText = "正常";
                tempClass = "status-good";
            } else if ((temp >= 15 && temp < 20) || (temp > 30 && temp <= 35)) {
                tempStatusText = "輕微偏離";
                tempClass = "status-warning";
            } else {
                tempStatusText = "嚴重偏離";
                tempClass = "status-bad";
            }
            tempStatus.innerHTML = `溫度: <span class="${tempClass}">${tempStatusText}</span>`;
            
            // 濕度狀態
            let humidityStatusText, humidityClass;
            if (humidity >= 50 && humidity <= 70) {
                humidityStatusText = "正常";
                humidityClass = "status-good";
            } else if ((humidity >= 40 && humidity < 50) || (humidity > 70 && humidity <= 80)) {
                humidityStatusText = "輕微偏離";
                humidityClass = "status-warning";
            } else {
                humidityStatusText = "嚴重偏離";
                humidityClass = "status-bad";
            }
            humidityStatus.innerHTML = `濕度: <span class="${humidityClass}">${humidityStatusText}</span>`;
            
            // 光照狀態
            let lightStatusText, lightClass;
            if (light >= 30000 && light <= 50000) {
                lightStatusText = "正常";
                lightClass = "status-good";
            } else if ((light >= 20000 && light < 30000) || (light > 50000 && light <= 70000)) {
                lightStatusText = "輕微偏離";
                lightClass = "status-warning";
            } else {
                lightStatusText = "嚴重偏離";
                lightClass = "status-bad";
            }
            lightStatus.innerHTML = `光照: <span class="${lightClass}">${lightStatusText}</span>`;
            
            // 計算總體狀態
            const badCount = [phClass, tempClass, humidityClass, lightClass].filter(c => c === "status-bad").length;
            const warningCount = [phClass, tempClass, humidityClass, lightClass].filter(c => c === "status-warning").length;
            
            let overallStatusText, overallClass;
            if (badCount >= 2) {
                overallStatusText = "生長停滯";
                overallClass = "status-bad";
                isHealthy = false;
                growthRate = 0;
            } else if (badCount === 1 || warningCount >= 2) {
                overallStatusText = "生長緩慢";
                overallClass = "status-warning";
                isHealthy = true;
                growthRate = 0.5;
            } else if (warningCount === 1) {
                overallStatusText = "正常生長";
                overallClass = "status-good";
                isHealthy = true;
                growthRate = 0.8;
            } else {
                overallStatusText = "健康生長";
                overallClass = "status-good";
                isHealthy = true;
                growthRate = 1;
            }
            overallStatus.innerHTML = `總體狀態: <span class="${overallClass}">${overallStatusText}</span>`;
            
            // 更新生長進度條
            const progress = Math.min((plantHeight / 200) * 100, 100);
            growthBar.style.width = `${progress}%`;
        }
        
        // 滑塊值變化事件
        phSlider.addEventListener('input', function() {
            phValue.textContent = this.value;
            updateSoilColor();
            checkStatus();
        });
        
        tempSlider.addEventListener('input', function() {
            tempValue.textContent = `${this.value}°C`;
            checkStatus();
        });
        
        humiditySlider.addEventListener('input', function() {
            humidityValue.textContent = `${this.value}%`;
            updateHumidity();
            checkStatus();
        });
        
        lightSlider.addEventListener('input', function() {
            lightValue.textContent = `${this.value} lux`;
            updateSunlight();
            checkStatus();
        });
        
        // 重置按鈕事件
        resetBtn.addEventListener('click', function() {
            clearInterval(growthTimer);
            plantHeight = 0;
            days = 0;
            heightValue.textContent = '0';
            daysValue.textContent = '0';
            growthBar.style.width = '0%';
            
            // 移除所有葉子和果實
            leaves.forEach(leaf => {
                if (leaf.parentNode) {
                    leaf.parentNode.removeChild(leaf);
                }
            });
            leaves = [];
            
            fruits.forEach(fruit => {
                if (fruit.parentNode) {
                    fruit.parentNode.removeChild(fruit);
                }
            });
            fruits = [];
            
            // 重置植物莖
            stem.style.height = '0px';
            
            // 重置控制面板
            phSlider.value = 6.5;
            phValue.textContent = '6.5';
            
            tempSlider.value = 25;
            tempValue.textContent = '25°C';
            
            humiditySlider.value = 60;
            humidityValue.textContent = '60%';
            
            lightSlider.value = 30000;
            lightValue.textContent = '30000 lux';
            
            updateSoilColor();
            updateSunlight();
            updateHumidity();
            checkStatus();
            
            // 重新開始生長模擬
            startGrowthSimulation();
        });
        
        // 開始生長模擬
        function startGrowthSimulation() {
            growthTimer = setInterval(function() {
                if (growthRate > 0) {
                    plantHeight += growthRate;
                    if (plantHeight > 200) plantHeight = 200;
                    heightValue.textContent = Math.floor(plantHeight);
                }
                
                days++;
                daysValue.textContent = days;
                
                updatePlantAppearance();
                checkStatus();
            }, 1000);
        }
        
// 音乐控制功能
function initMusic() {
    const musicControl = document.getElementById('musicControl');
    const bgMusic = document.getElementById('bgMusic');
    let isMusicPlaying = true; // 默认设为true表示播放状态
    
    // 尝试自动播放（不静音）
    bgMusic.muted = false;
    bgMusic.play()
        .then(() => {
            console.log("背景音乐已播放");
            musicControl.innerHTML = '<i class="fas fa-pause"></i>'; // 显示暂停图标
        })
        .catch(e => {
            console.log("自动播放被阻止:", e);
            // 如果自动播放失败，改为静音自动播放
            bgMusic.muted = true;
            bgMusic.play()
                .then(() => {
                    console.log("背景音乐已加载（静音）");
                    musicControl.innerHTML = '<i class="fas fa-music"></i>'; // 显示音乐图标
                    isMusicPlaying = false; // 标记为静音状态
                });
        });
    
    // 点击音乐控制按钮
    musicControl.addEventListener('click', function() {
        if (isMusicPlaying) {
            bgMusic.pause();
            musicControl.innerHTML = '<i class="fas fa-music"></i>';
        } else {
            bgMusic.muted = false;
            bgMusic.play()
                .then(() => {
                    musicControl.innerHTML = '<i class="fas fa-pause"></i>';
                })
                .catch(e => {
                    console.log("播放失败:", e);
                    alert("请点击页面任意位置后，再点击音乐按钮");
                });
        }
        isMusicPlaying = !isMusicPlaying;
    });
    
    // 用户首次交互后尝试取消静音（如果之前是静音状态）
    document.addEventListener('click', function firstInteraction() {
        if (bgMusic.muted) {
            bgMusic.muted = false;
            bgMusic.play()
                .then(() => {
                    musicControl.innerHTML = '<i class="fas fa-pause"></i>';
                    isMusicPlaying = true;
                });
        }
        document.removeEventListener('click', firstInteraction);
    }, { once: true });
}
        
        // 初始化
        function init() {
            initRaindrops();
            updateSoilColor();
            updateSunlight();
            updateHumidity();
            checkStatus();
            startGrowthSimulation();
            initMusic(); // 初始化音乐控制
        }
        
        // 頁面加載時初始化
        window.onload = init;
    </script>
</body>
</html>
